import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  ChatBubbleLeftRightIcon,
  DocumentTextIcon,
  EyeIcon,
  CheckCircleIcon,
  ArrowPathIcon,
  SparklesIcon,
  LightBulbIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';
import { GenerationResult } from '../services/oneClickGenerator';
import { OrganizedContent } from '../services/aiOrganizer';

interface NaturalLanguagePortfolioEditorProps {
  initialContent: GenerationResult;
  organizedContent: OrganizedContent;
  onComplete: (finalContent: string) => void;
  onBack?: () => void;
}

interface StorytellingImprovement {
  section: string;
  original: string;
  improved: string;
  reasoning: string;
}

const NaturalLanguagePortfolioEditor: React.FC<NaturalLanguagePortfolioEditorProps> = ({
  initialContent,
  organizedContent,
  onComplete,
  onBack
}) => {
  const [currentContent, setCurrentContent] = useState('');
  const [editInstructions, setEditInstructions] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [editHistory, setEditHistory] = useState<Array<{instruction: string, timestamp: Date}>>([]);
  const [showStorytellingImprovement, setShowStorytellingImprovement] = useState(false);
  const [isImprovingStory, setIsImprovingStory] = useState(false);
  const [improvementSuggestions, setImprovementSuggestions] = useState<StorytellingImprovement[]>([]);

  useEffect(() => {
    // Extract HTML content from the initial content
    let htmlContent = '';
    try {
      const parsedContent = JSON.parse(initialContent.content);
      if (parsedContent.sections && parsedContent.sections[0]?.blocks?.[0]?.text) {
        htmlContent = parsedContent.sections[0].blocks[0].text;
      }
    } catch (error) {
      htmlContent = initialContent.content;
    }
    setCurrentContent(htmlContent);
  }, [initialContent]);

  const handleNaturalLanguageEdit = async () => {
    if (!editInstructions.trim()) return;

    setIsProcessing(true);
    try {
      // Here we would call an AI service to modify the content based on natural language instructions
      // For now, we'll simulate this with a simple implementation
      
      // Add to edit history
      setEditHistory(prev => [...prev, {
        instruction: editInstructions,
        timestamp: new Date()
      }]);

      // In a real implementation, you would call an AI service like OpenAI to modify the HTML content
      // based on the natural language instructions
      
      // For now, just show that we processed the instruction
      console.log('Processing instruction:', editInstructions);
      
      setEditInstructions('');
    } catch (error) {
      console.error('Error processing edit instruction:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const extractTextFromHtml = (html: string) => {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    return tempDiv.textContent || tempDiv.innerText || '';
  };

  // 스토리텔링 개선 기능
  const handleStorytellingImprovement = async () => {
    setIsImprovingStory(true);
    try {
      // 실제 구현에서는 AI 서비스를 호출해서 스토리텔링 개선
      // 여기서는 시뮬레이션으로 구현
      const improvements: StorytellingImprovement[] = [
        {
          section: '프로젝트 설명',
          original: '쇼핑몰 웹사이트를 개발했습니다.',
          improved: '사용자 경험을 중심으로 한 쇼핑몰 플랫폼을 설계하고 개발하여, 구매 전환율을 15% 향상시키고 페이지 로딩 속도를 40% 개선했습니다.',
          reasoning: '구체적인 성과 지표와 사용자 가치를 강조하여 임팩트를 명확히 전달'
        },
        {
          section: '기술 역량',
          original: 'React, Node.js를 사용할 수 있습니다.',
          improved: 'React를 활용한 반응형 사용자 인터페이스 개발과 Node.js 기반 RESTful API 설계에 능숙하며, 실제 프로덕션 환경에서 월 10만 사용자를 처리하는 시스템을 구축한 경험이 있습니다.',
          reasoning: '단순한 기술 나열이 아닌 실무 경험과 규모를 구체적으로 명시'
        },
        {
          section: '문제 해결',
          original: '버그를 수정했습니다.',
          improved: '크로스 브라우저 호환성 이슈를 분석하여 Safari에서 발생하던 결제 프로세스 오류를 해결했고, 이를 통해 결제 성공률을 85%에서 96%로 향상시켰습니다.',
          reasoning: '문제의 구체적인 내용과 해결 과정, 그리고 정량적 성과를 포함'
        }
      ];
      
      setImprovementSuggestions(improvements);
      setShowStorytellingImprovement(true);
      
      // 개선된 내용을 현재 콘텐츠에 적용
      let improvedContent = currentContent;
      improvements.forEach(improvement => {
        // 실제로는 AI가 전체 콘텐츠를 개선하겠지만, 여기서는 시뮬레이션
        improvedContent = improvedContent.replace(
          improvement.original,
          improvement.improved
        );
      });
      
      setCurrentContent(improvedContent);
      
    } catch (error) {
      console.error('스토리텔링 개선 실패:', error);
    } finally {
      setIsImprovingStory(false);
    }
  };

  const handleComplete = () => {
    onComplete(currentContent);
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <div className="flex justify-center items-center mb-4">
          <ChatBubbleLeftRightIcon className="w-8 h-8 text-blue-600 mr-2" />
          <h2 className="text-3xl font-bold text-gray-900">자연어 포트폴리오 편집</h2>
        </div>
        <p className="text-lg text-gray-600">
          자연어로 포트폴리오를 수정해보세요. 예: "프로젝트 설명을 더 구체적으로 써줘" 또는 "기술 스택 부분에 Docker 추가해줘"
        </p>
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Natural Language Input */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center">
              <ChatBubbleLeftRightIcon className="w-5 h-5 mr-2 text-blue-600" />
              편집 요청
            </h3>
            
            <textarea
              value={editInstructions}
              onChange={(e) => setEditInstructions(e.target.value)}
              className="w-full h-32 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent resize-none"
              placeholder="어떻게 수정하고 싶으신가요?&#10;예시:&#10;- 프로젝트 설명을 더 자세히 써줘&#10;- 기술 스택에 Docker와 Kubernetes 추가해줘&#10;- 경력 부분을 더 임팩트 있게 작성해줘&#10;- 전체적인 톤을 더 전문적으로 바꿔줘"
            />
            
            <div className="flex space-x-3 mt-4">
              <button
                onClick={handleNaturalLanguageEdit}
                disabled={!editInstructions.trim() || isProcessing}
                className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700 transition-colors flex items-center justify-center"
              >
                {isProcessing ? (
                  <>
                    <ArrowPathIcon className="w-5 h-5 mr-2 animate-spin" />
                    수정 중...
                  </>
                ) : (
                  <>
                    <ChatBubbleLeftRightIcon className="w-5 h-5 mr-2" />
                    편집 요청
                  </>
                )}
              </button>
              
              <button
                onClick={handleStorytellingImprovement}
                disabled={isImprovingStory}
                className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:from-purple-700 hover:to-pink-700 transition-all duration-200 flex items-center justify-center"
              >
                {isImprovingStory ? (
                  <>
                    <ArrowPathIcon className="w-5 h-5 mr-2 animate-spin" />
                    개선 중...
                  </>
                ) : (
                  <>
                    <SparklesIcon className="w-5 h-5 mr-2" />
                    AI 스토리텔링 개선
                  </>
                )}
              </button>
            </div>

          {/* Edit History */}
          {editHistory.length > 0 && (
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <h4 className="font-medium text-gray-900 mb-3">편집 기록</h4>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {editHistory.map((edit, index) => (
                  <div key={index} className="flex items-start p-3 bg-gray-50 rounded-lg">
                    <CheckCircleIcon className="w-5 h-5 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                    <div className="flex-1">
                      <p className="text-sm text-gray-800">{edit.instruction}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        {edit.timestamp.toLocaleTimeString('ko-KR')}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Preview */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg border border-gray-200">
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <h3 className="text-xl font-semibold flex items-center">
                <DocumentTextIcon className="w-5 h-5 mr-2 text-blue-600" />
                포트폴리오 미리보기
              </h3>
              <button
                onClick={() => setIsPreviewOpen(!isPreviewOpen)}
                className="text-blue-600 hover:text-blue-800 flex items-center"
              >
                <EyeIcon className="w-5 h-5 mr-1" />
                {isPreviewOpen ? '접기' : '펼치기'}
              </button>
            </div>
            
            {isPreviewOpen && (
              <div className="p-6">
                <div 
                  className="prose max-w-none"
                  dangerouslySetInnerHTML={{ __html: currentContent }}
                />
              </div>
            )}
            
            {!isPreviewOpen && (
              <div className="p-6">
                <p className="text-gray-600 mb-4">현재 포트폴리오 내용:</p>
                <div className="bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto">
                  <pre className="whitespace-pre-wrap text-sm text-gray-800">
                    {extractTextFromHtml(currentContent)}
                  </pre>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
        {onBack && (
          <button
            onClick={onBack}
            className="bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-medium hover:bg-gray-200 transition-colors"
          >
            이전으로
          </button>
        )}
        
        <div className="flex-1" />
        
        <button
          onClick={handleComplete}
          className="bg-green-600 text-white py-3 px-8 rounded-lg font-medium hover:bg-green-700 transition-colors flex items-center"
        >
          <CheckCircleIcon className="w-5 h-5 mr-2" />
          편집 완료
        </button>
      </div>

      {/* 스토리텔링 개선 결과 모달 */}
      <AnimatePresence>
        {showStorytellingImprovement && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
            onClick={() => setShowStorytellingImprovement(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-6 text-white">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <SparklesIcon className="w-8 h-8 mr-3" />
                    <div>
                      <h3 className="text-2xl font-bold">AI 스토리텔링 개선 완료</h3>
                      <p className="text-purple-100">포트폴리오 문구가 더욱 매력적으로 개선되었습니다</p>
                    </div>
                  </div>
                  <button
                    onClick={() => setShowStorytellingImprovement(false)}
                    className="text-white hover:text-gray-200 transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>

              <div className="p-6 overflow-auto max-h-[calc(90vh-120px)]">
                <div className="space-y-6">
                  {improvementSuggestions.map((improvement, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="border border-gray-200 rounded-xl p-6"
                    >
                      <div className="flex items-center mb-4">
                        <LightBulbIcon className="w-6 h-6 text-yellow-500 mr-2" />
                        <h4 className="text-lg font-semibold text-gray-900">{improvement.section}</h4>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                          <h5 className="font-medium text-gray-700 mb-2 flex items-center">
                            <span className="w-2 h-2 bg-red-400 rounded-full mr-2"></span>
                            기존 문구
                          </h5>
                          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                            <p className="text-gray-800 text-sm">{improvement.original}</p>
                          </div>
                        </div>

                        <div>
                          <h5 className="font-medium text-gray-700 mb-2 flex items-center">
                            <span className="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
                            개선된 문구
                          </h5>
                          <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                            <p className="text-gray-800 text-sm">{improvement.improved}</p>
                          </div>
                        </div>
                      </div>

                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <div className="flex items-start">
                          <InformationCircleIcon className="w-5 h-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" />
                          <div>
                            <h6 className="font-medium text-blue-900 mb-1">개선 포인트</h6>
                            <p className="text-blue-800 text-sm">{improvement.reasoning}</p>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>

                <div className="mt-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg">
                  <div className="flex items-center">
                    <CheckCircleIcon className="w-6 h-6 text-green-600 mr-3" />
                    <div>
                      <h4 className="font-semibold text-gray-900">개선 완료</h4>
                      <p className="text-gray-700 text-sm">위 개선사항들이 포트폴리오에 자동으로 적용되었습니다. 미리보기에서 확인해보세요!</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 p-4 border-t flex justify-end space-x-3">
                <button
                  onClick={() => setShowStorytellingImprovement(false)}
                  className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  확인
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}; // 컴포넌트 끝

export default NaturalLanguagePortfolioEditor;